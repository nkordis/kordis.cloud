name: main

on:
  push:
    branches:
      - dev

permissions:
  contents: write  # Grant write permissions to modify repository contents

jobs:
  test-infra:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: '3.9'

    - name: Cache Python packages
      uses: actions/cache@v2
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install awscli boto3
        pip install -r tests/requirements.txt
        pip install aws-sam-cli

    - name: Run tests
      run: pytest -v tests/unit/test_handler.py

    - name: Validate CloudFormation template
      run: sam  validate

  build-deploy-infra:
    needs: test-infra
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: '3.9'

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Build infrastructure
      run: sam build

    - name: Deploy infrastructure
      run: sam deploy --no-confirm-changeset --no-fail-on-empty-changeset

  integration-tests:
    needs: build-deploy-infra
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: '3.9'
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r tests/requirements.txt
    - name: Set AWS SAM Stack Name
      run: echo "AWS_SAM_STACK_NAME=kordis-cloud" >> $GITHUB_ENV
    - name: Run Integration Tests
      run: pytest -vv tests/integration/test_api_gateway.py

  deploy-site:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 18
      - name: Install Dependencies
        run: |
          npm install --save-dev ajv@^7
          rm -rf ./dev-portfolio/node_modules
          rm -f ./dev-portfolio/package-lock.json
          npm install --prefix ./dev-portfolio --legacy-peer-deps
      - name: Build the website files
        run: npm run --prefix ./dev-portfolio build
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Sync Website files to S3 Bucket
        run: aws s3 sync ./dev-portfolio/build s3://kordis-cloud --delete

  e2e-tests:
    if: ${{ vars.SKIP_E2E_TESTS == 'false' }}
    needs: deploy-site
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.9'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest selenium

      - name: Install Chrome and ChromeDriver
        run: |
          sudo apt-get update
          sudo apt-get install -y google-chrome-stable
          CHROME_VERSION=$(google-chrome --version | grep -oP '\d+\.\d+\.\d+')
          wget -q "https://chromedriver.storage.googleapis.com/${CHROME_VERSION}/chromedriver_linux64.zip"
          sudo unzip -q chromedriver_linux64.zip -d /usr/local/bin/
          rm chromedriver_linux64.zip

      - name: Run E2E Tests
        run: pytest tests/e2e/
        env:
          PYTHONPATH: ${{ github.workspace }}

  auto-merge-to-main:
    needs: [integration-tests, deploy-site]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/dev' # Ensures this job only runs on the dev branch
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: 'dev'
          fetch-depth: 0

      - name: Setup Git User
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"

      - name: Merge dev to main
        run: |
          git fetch origin
          git checkout main
          git merge dev
          git push origin main
